-- MySQL Script generated by MySQL Workbench
-- Tue Oct  3 07:07:51 2023
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `mydb` ;

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `mydb` DEFAULT CHARACTER SET utf8 ;
USE `mydb` ;

DROP TABLE IF EXISTS country;
DROP TABLE IF EXISTS user;
DROP TABLE IF EXISTS city;
DROP TABLE IF EXISTS playlist_has_songty;
DROP TABLE IF EXISTS user_listeningty;
DROP TABLE IF EXISTS playlist;
DROP TABLE IF EXISTS song;
DROP TABLE IF EXISTS album;
DROP TABLE IF EXISTS word;
DROP TABLE IF EXISTS performer;
DROP TABLE IF EXISTS music_lable;
DROP TABLE IF EXISTS region;
DROP TABLE IF EXISTS playlist_has_song; 

-- -----------------------------------------------------
-- Table `mydb`.`country`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`country` ;

CREATE TABLE IF NOT EXISTS `mydb`.`country` (
  `country_id` INT NOT NULL,
  `country_name` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`country_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`city`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`city` ;

CREATE TABLE IF NOT EXISTS `mydb`.`city` (
  `city_id` INT NOT NULL,
  `country_id` INT NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`city_id`),
  INDEX `fk_city_country1_idx` (`country_id` ASC) VISIBLE,
  CONSTRAINT `fk_city_country1`
    FOREIGN KEY (`country_id`)
    REFERENCES `mydb`.`country` (`country_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`region`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`region` ;

CREATE TABLE IF NOT EXISTS `mydb`.`region` (
  `region_id` INT NOT NULL,
  `city_id` INT NOT NULL,
  `region_name` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`region_id`),
  INDEX `fk_region_city1_idx` (`city_id` ASC) VISIBLE,
  CONSTRAINT `fk_region_city1`
    FOREIGN KEY (`city_id`)
    REFERENCES `mydb`.`city` (`city_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`music_lable`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`music_lable` ;

CREATE TABLE IF NOT EXISTS `mydb`.`music_lable` (
  `music_lable_id` INT NOT NULL,
  `music_lable_name` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`music_lable_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`performer`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`performer` ;

CREATE TABLE IF NOT EXISTS `mydb`.`performer` (
  `performer_id` INT NOT NULL,
  `performer_name` VARCHAR(45) NOT NULL,
  `music_lable_id` INT NOT NULL,
  `region_id` INT NOT NULL,
  PRIMARY KEY (`performer_id`),
  INDEX `fk_performer_music_lable1_idx` (`music_lable_id` ASC) VISIBLE,
  INDEX `fk_performer_region1_idx` (`region_id` ASC) VISIBLE,
  INDEX `performer_name_idx` (`performer_name` ASC) VISIBLE,
  CONSTRAINT `fk_performer_music_lable1`
    FOREIGN KEY (`music_lable_id`)
    REFERENCES `mydb`.`music_lable` (`music_lable_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_performer_region1`
    FOREIGN KEY (`region_id`)
    REFERENCES `mydb`.`region` (`region_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`album`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`album` ;

CREATE TABLE IF NOT EXISTS `mydb`.`album` (
  `performer_id` INT NOT NULL,
  `song_id` INT NOT NULL,
  `album_id` INT NOT NULL,
  `album_name` VARCHAR(45) NOT NULL,
  `count_song` INT NOT NULL,
  PRIMARY KEY (`performer_id`, `song_id`, `album_id`),
  INDEX `fk_performer_has_song_performer1_idx` (`performer_id` ASC) VISIBLE,
  CONSTRAINT `fk_performer_has_song_performer1`
    FOREIGN KEY (`performer_id`)
    REFERENCES `mydb`.`performer` (`performer_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`word`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`word` ;

CREATE TABLE IF NOT EXISTS `mydb`.`word` (
  `word_id` INT NOT NULL,
  `word_count` INT NOT NULL,
  `word_language` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`word_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`song`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`song` ;

CREATE TABLE IF NOT EXISTS `mydb`.`song` (
  `song_id` INT NOT NULL,
  `song_title` VARCHAR(45) NOT NULL,
  `genre` VARCHAR(45) NOT NULL,
  `release_date` DATETIME NULL,
  `song_lenght` FLOAT NULL,
  `performer_id` INT NOT NULL,
  `album_id` INT NOT NULL,
  `word_id` INT NOT NULL,
  PRIMARY KEY (`song_id`),
  INDEX `fk_song_album1_idx` (`performer_id` ASC, `album_id` ASC) VISIBLE,
  INDEX `fk_song_rating1_idx` (`word_id` ASC) VISIBLE,
  CONSTRAINT `fk_song_album1`
    FOREIGN KEY (`performer_id` , `album_id`)
    REFERENCES `mydb`.`album` (`performer_id` , `song_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_song_rating1`
    FOREIGN KEY (`word_id`)
    REFERENCES `mydb`.`word` (`word_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`playlist`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`playlist` ;

CREATE TABLE IF NOT EXISTS `mydb`.`playlist` (
  `playlist_id` INT NOT NULL,
  `playlist_name` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`playlist_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`user_listening`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`user_listening` ;

CREATE TABLE IF NOT EXISTS `mydb`.`user_listening` (
  `user_listening_id` INT NOT NULL,
  `song_song_id` INT NOT NULL,
  PRIMARY KEY (`user_listening_id`),
  INDEX `fk_user_listening_song1_idx` (`song_song_id` ASC) VISIBLE,
  CONSTRAINT `fk_user_listening_song1`
    FOREIGN KEY (`song_song_id`)
    REFERENCES `mydb`.`song` (`song_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`user`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`user` ;

CREATE TABLE IF NOT EXISTS `mydb`.`user` (
  `username` VARCHAR(16) NOT NULL,
  `email` VARCHAR(255) NOT NULL,
  `password` VARCHAR(32) NOT NULL,
  `premium_subscription` VARCHAR(5) NOT NULL,
  `playlist_id` INT NOT NULL,
  `user_id` INT NOT NULL,
  INDEX `fk_user_playlist1_idx` (`playlist_id` ASC) VISIBLE,
  INDEX `email_idx` (`email` ASC) VISIBLE,
  INDEX `password_idx` (`password` ASC) VISIBLE,
  PRIMARY KEY (`user_id`),
  CONSTRAINT `fk_user_playlist1`
    FOREIGN KEY (`playlist_id`)
    REFERENCES `mydb`.`playlist` (`playlist_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table `mydb`.`playlist_has_song`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`playlist_has_song` ;

CREATE TABLE IF NOT EXISTS `mydb`.`playlist_has_song` (
  `playlist_playlist_id` INT NOT NULL,
  `song_song_id` INT NOT NULL,
  PRIMARY KEY (`playlist_playlist_id`, `song_song_id`),
  INDEX `fk_playlist_has_song_song1_idx` (`song_song_id` ASC) VISIBLE,
  INDEX `fk_playlist_has_song_playlist1_idx` (`playlist_playlist_id` ASC) VISIBLE,
  CONSTRAINT `fk_playlist_has_song_playlist1`
    FOREIGN KEY (`playlist_playlist_id`)
    REFERENCES `mydb`.`playlist` (`playlist_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_playlist_has_song_song1`
    FOREIGN KEY (`song_song_id`)
    REFERENCES `mydb`.`song` (`song_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

ALTER TABLE `mydb`.`song`
ADD INDEX `index_name` (`song_title`);
ALTER TABLE `mydb`.`city`
ADD INDEX `index_name` (`name`);

INSERT INTO mydb.country (country_id, country_name)
VALUES (1, 'Ukraine'),
       (2, 'United States'),
       (3, 'United Kingdom'),
       (4, 'Canada'),
       (5, 'Germany'),
       (6, 'France'),
       (7, 'Australia'),
       (8, 'Japan'),
       (9, 'Brazil'),
       (10, 'India');
       
INSERT INTO mydb.city (city_id, country_id, name)
VALUES (1, 1, 'Kiev'),
       (2, 2, 'New York'),
       (3, 3, 'London'),
       (4, 4, 'Toronto'),
       (5, 5, 'Berlin'),
       (6, 6, 'Paris'),
       (7, 7, 'Sydney'),
       (8, 8, 'Tokyo'),
       (9, 9, 'Rio de Janeiro'),
       (10, 10, 'Mumbai');
       
INSERT INTO mydb.region (region_id, city_id, region_name)
VALUES (1, 1, 'Kyiv Oblast'),
       (2, 2, 'New York City'),
       (3, 3, 'Greater London'),
       (4, 4, 'Ontario'),
       (5, 5, 'Brandenburg'),
       (6, 6, 'Île-de-France'),
       (7, 7, 'New South Wales'),
       (8, 8, 'Kanto'),
       (9, 9, 'Rio de Janeiro State'),
       (10, 10, 'Maharashtra');
       
INSERT INTO mydb.music_lable (music_lable_id, music_lable_name)
VALUES (1, 'Secret Service EA'),
       (2, 'mamamusic'),
       (3, 'Sony Music Entertainment'),
       (4, 'Warner Music Group'),
       (5, 'EMI'),
       (6, 'Republic Records'),
       (7, 'Columbia Records'),
       (8, 'Interscope Records'),
       (9, 'RCA Records'),
       (10, 'Universal Music Group');
       
INSERT INTO mydb.performer (performer_id, performer_name, music_lable_id, region_id)
VALUES (1, ' Jerry Heil', 1, 1),
       (3, 'KAZKA', 2, 1),
       (4, 'Katy Perry', 5, 4),
       (5, 'Cardi B', 9, 3),
       (6, ' The Weeknd', 6, 8),
       (7, 'Ariana Grande', 6, 4),
       (8, 'Adele', 3, 3),
       (9, 'Dua Lipa', 4, 4),
       (10, 'Justin Timberlake', 9, 6);       
       
INSERT INTO mydb.album (performer_id, song_id, album_id, album_name, count_song)
VALUES (1, 1, 1, 'I_SHE', 6),
       (2, 2, 2, 'Nirvana', 9),
       (3, 3, 3, 'Melodies of Spring', 12),
       (4, 4, 4, 'Epic Journeys', 8),
       (5, 5, 5, 'Sunset Vibes', 10),
       (6, 6, 6, 'Harmony Harmony', 14),
       (7, 7, 7, 'Electric Dreams', 11),
       (8, 8, 8, 'Nightfall Serenade', 9),
       (9, 9, 9, 'Rhythmic Echoes', 13),
       (10, 10, 10, 'Golden Oldies', 16);
       
INSERT INTO mydb.song (song_id, song_title, genre, release_date, song_lenght, performer_id, album_id, word_id)
VALUES (1, 'Free cash register','household pop', '2020-04-06', 3, 1, 1, 2),
       (2, 'Zemna', 'pop music', '2018-02-09', 4, 2, 2, 2),
       (3, 'Dance with the Stars', 'Electronic', '2022-12-15', 3.8, 3, 3, 3),
       (4, 'Ocean Waves', 'Instrumental', '2021-07-20', 4.5, 4, 4, 1),
       (5, 'City Lights', 'Pop', '2023-03-05', 3.2, 5, 5, 2),
       (6, 'Into the Wilderness', 'Rock', '2021-11-10', 4.0, 6, 6, 1),
       (7, 'Starry Night', 'Ambient', '2022-05-22', 3.6, 7, 7, 3),
       (8, 'Urban Groove', 'R&B', '2023-06-28', 4.2, 8, 8, 2),
       (9, 'Lost in Time', 'Indie', '2022-09-15', 3.9, 9, 9, 1),
       (10, 'Summer Breeze', 'Chill', '2023-08-10', 4.1, 10, 10, 3);

INSERT INTO mydb.user ( user_id, username, email, password, premium_subscription, playlist_id)
VALUES (1, 'Maruna', 'MarunaOlma12@mail.com' ,'12345', 'yes', 2),
       (2, 'Oleg', 'OlegSenat@gamil.com' , '54321', 'no', 2),
       (3, 'Sophia', 'Sophia@email.com', 'password123', 'yes', 1),
       (4, 'Ethan', 'Ethan@email.com', 'password456', 'no', 1),
       (5, 'Olivia', 'Olivia@email.com', 'password789', 'yes', 2),
       (6, 'Liam', 'Liam@email.com', 'password111', 'no', 2),
       (7, 'Emma', 'Emma@email.com', 'password222', 'yes', 1),
       (8, 'Noah', 'Noah@email.com', 'password333', 'no', 1),
       (9, 'Ava', 'Ava@email.com', 'password444', 'yes', 2),
       (10, 'Mason', 'Mason@email.com', 'password555', 'no', 2);

INSERT INTO mydb.playlist (playlist_id, playlist_name)
VALUES (1, "songs for morning routine"),
       (2, 'songs for study'),
       (3, 'Relaxation Tunes'),
       (4, 'Workout Beats'),
       (5, 'Road Trip Mix'),
       (6, 'Classical Inspirations'),
       (7, 'Indie Vibes'),
       (8, 'Latin Rhythms'),
       (9, 'Country Jams'),
       (10, '80s Classics');

INSERT INTO mydb.user_listening (user_listening_id, song_song_id)
VALUES (1, 1),
       (2, 2),
       (3, 3),
       (4, 4),
       (5, 5),
       (6, 6),
       (7, 7),
       (8, 8),
       (9, 9),
       (10, 10);
       
INSERT INTO mydb.word (word_id, word_count, word_language)
VALUES (1, 30, "English"),
       (2, 35, 'Ukrainian'),
       (3, 30, 'Italian'),
       (4, 25, 'German'),
       (5, 28, 'Russian'),
       (6, 32, 'Spanish'),
       (7, 29, 'French'),
       (8, 27, 'Portuguese'),
       (9, 30, 'Dutch'),
       (10, 26, 'Swedish');
       
INSERT INTO mydb.playlist_has_song (playlist_playlist_id, song_song_id)
VALUES (1, 1),
       (2, 2),
       (3, 3),
       (4, 4),
       (5, 5),
       (6, 6),
       (7, 7),
       (8, 8),
       (9, 9),
       (10, 10);


-- Вставка значень в табличку `song`
INSERT INTO `mydb`.`song` (`song_id`, `song_title`, `genre`, `release_date`, `song_lenght`, `performer_id`, `album_id`, `word_id`)
VALUES
  (90, 'Назва пісні 1', 'Жанр 1', '2023-01-01', 3.5, 1, 1, 1),
  (91, 'Назва пісні 2', 'Жанр 2', '2023-02-01', 4.2, 2, 2, 2);




INSERT INTO `mydb`.`playlist` (`playlist_id`, `playlist_name`)
VALUES
  (90, 'Назва плейлисту 1'),
  (91, 'Назва плейлисту 2');


SELECT * FROM country;
SELECT * FROM city;
SELECT * FROM region;
SELECT * FROM music_lable;
SELECT * FROM performer;
SELECT * FROM album;
SELECT * FROM user;
SELECT * FROM playlist;
SELECT * FROM user_listening;
SELECT * FROM word;
SELECT * FROM song;
SELECT * FROM playlist_has_song;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
